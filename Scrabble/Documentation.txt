Documentation...bleh :(


OVERVIEW
==============================
==============================

Flow:
    search.py   --> Preprocess.py \ 
              \ --> Process.py     | --> Constants.py
               \ --> Points.py    / 

search.py
    input(search_string, option)
    output(final_results, t2)
    
Preprocess.py
    reorderString(self, string_input)
    checkInput(self, search_string)
    
Process.py
    blankTileProcessing(self, search_string)
    stringPermutations(self, search_string)
    collectDictionarySegments(self, reordered_search_string)
    findWords(self, permutation_list, filtered_content)
    findWordsContaining(self, search_string, filtered_content, option)
    
Points.py
    associatePointScore()


search.py (not finalized)
===========================
FUNCTIONS:
    main():
        Description:
            Incorporated a basic menu and used the raw_input function to get the user's word they
            are searching for (input_string) and what they want to do with it (option). This is where both 
            the variables are set. Declaration of variables and objects are done here and 
            main calls the checkInput function from the Preprocess class to validate the string input
            
        Input Parameters:
            raw_input(search_string) - raw input from the user (tiles they will be inputting to search)
            raw_input(option) - flag indicating which option (kind of search) they chose
            
        Output:
            None

    input(search_string, option):
        Description:
            Takes the options the user indicates and the string they inputted to search.
            It goes through the main options (1-5) of being able to search for the string in the 
            dictionary, search for words starting with the string, search for words ending with the string, 
            search for words that contain the specific string, or the ability to search for words with 
            the blank tiles. The function goes through each option and calls functions from the Preprocess, 
            Process, Points classes accordingly in order to process the specific steps needed for the 
            desired output
            
        Input Parameters: 
            search_string - raw input from the user (tiles they will be inputting to search)
            option - flag indicating which option (kind of search) they chose
            
        Output:
            If the user chooses an option that is not between 1-5, then the function prints and Error 
            and then exits the entire program with the system call, sys.exit()

    output(final_results, t2):
        Description:
            Takes the final results that were processed from the Process.py class and prints out the [2D] list
            in a legible way. The words are outputted on the left side while the words' point score is outputted
            on the right side.
        
        Input Parameters:
            final_results - [2D] list of the words found and their associated point score (final_results[word][points])
            t2 - the time it took to process the user's query (for diagnostic purposes)
            
        Output:
            print the results, the time it took, the length/number of words found


Preprocess.py
===========================
FUNCTIONS:
    reorderString(self, string_input)
        Input:
        Output:
        Description:

    checkInput(self, search_string)
        Input:
        Output:
        Description:


Process.py
===========================
FUNCTIONS:
    blankTileProcessing(self, search_string)
        Input:
        Output:
        Description:

    stringPermutations(self, search_string)
        Input:
        Output:
        Description:

    collectDictionarySegments(self, reordered_search-string)
        Input:
        Output:
        Description:

    findWords(self, permutation_list, filtered_content)
        Input:
        Output:
        Description:

    findWordsContaining(self, search_string, fitlered_content, option)
        Input:
        Output:
        Description:

Points.py
===========================
FUNCTIONS:
    associatePointScore()        
        Input:
        Output:
        Description: